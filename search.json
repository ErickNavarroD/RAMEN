[{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"RAMEN","text":"Regional Association Methylome variability Exposome geNome (RAMEN) R package whose goal integrate genomic, methylomic exposomic data model contribution genetics (G) environment (E) DNA methylation (DNAme) variability. RAMEN identifies Variable Methylated Regions (VMRs) microarray DNAme data , using genotype environmental data, identifies following models better explains variability regions across methylome: Fitted models G variables represented SNPs, E variables environmental exposures, covars concomitant variables (.e. variables adjusted model interest study cell type proportion, age, etc.). main gene-environment interaction modeling pipeline conducted though six core functions: findVMRs() identifies Variable Methylated Regions (VMRs) microarrays summarizeVMRs()summarizes regional methylation state VMR findCisSNPs() identifies SNPs cis VMR selectVariables() conducts LASSO-based variable selection strategy identify potentially relevant cis SNPs environmental variables lmGE() fits linear single-variable genetic (G) environmental (E), pairwise additive (G+E) interaction (GxE) linear models select best explanatory model per VMR. nullDistGE() simulates delta R squared null distribution G E effects DNAme variability. Useful filtering poor-performing best explanatory models selected lmGE(). functions compatible parallel computing, recommended due computationally intensive tasks conducted package. addition standard gene-environment interaction modeling pipeline, RAMEN can useful DNAme analyses (see Variations standard workflow), reducing tested sites Epigenome Wide Association Studies, grouping DNAme probes regions, identifying SNPs near probe, etc.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"citation","dir":"Articles","previous_headings":"Introduction","what":"Citation","title":"RAMEN","text":"manuscript detailing RAMEN use currently preparation. information please contact Erick . Navarro-Delgado erick.navarrodelgado@bcchr.ca.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"gene-environment-interaction-analysis","dir":"Articles","previous_headings":"","what":"Gene-environment interaction analysis","title":"RAMEN","text":"main purpose RAMEN package conduct methylome-wide analysis identify model (G, E, G+E GxE) better explains variability across genome. vignette, illustrate use package. conduct analysis, following cleaned data sets (.e. quality exploratory data analysis checks) cohort required: DNAme data DNAme array manifest Genotyping data Genotype information Environmental exposure data Concomitant variables data data, overview pipeline following: : DNAme data grouped VMRs, DNAme state per individual summarized region Using identified VMRs genomic information, identify SNPs cis VMR cis SNPs exposome data subjected variable selection stage selected variables (SNPs Es) enter modelling stage, outputs one single winning model per VMR thresholds obtained simulated null distribution used remove winning models performance likely due chance. following sections go steps guide user regarding recommended parameters use function package. illustration purposes, provide small toy data sets intend simulate real biological phenomenon. data sets already available RAMEN package.","code":"#Load the packages used throughout the vignette library(RAMEN) library(dplyr) library(ggplot2) library(tidyr)"},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"identify-vmrs-and-summarize-their-methylation-state","dir":"Articles","previous_headings":"Gene-environment interaction analysis","what":"Identify VMRs and summarize their methylation state","title":"RAMEN","text":"first step pipeline identify Variable Methylated Regions(VMRs) data set. might wondering “VMR use instead DNAme levels CpG site?”. use regions well established nearby CpG sites likely share similar DNAme profile therefore work functional units. , statistical point view, testing separately proximal CpGs part unit redundant. side, use variable regions interested units display high level variability; words, non-variant sites variability left explained genetics environment. , conclusion, use VMRs increase power reduce multiple hypothesis testing burden grouping probes likely work biological unit, focusing set regions interest study. RAMEN identifies 2 categories VMRs: Canonical VMRs: Group Highly Variable Probes proximal correlated. Highly Variable Probes defined probes specific variance percentile threshold specified user (default 90th percentile). proximity distance pearson correlation threshold specified user, defaults 1 kilobase 0.15 respectively. guidance correlation threshold use, recommend checking Supplementary Figure 1 CoMeBack R package (Gatev et al., 2020) simulation empirically determine default guidance specification correlation threshold parameter dependent sample size done. Non canonical VMRs: Regions composed Highly Variable Probes nearby probes measured array (according distance parameter specified user). category created take account characteristics DNAme microarray plataform, probes covering non-homogenelously genome. specially important microarrays EPIC array high number probes regulatory regions represented single probe. Furthermore, probes shown good representatives methylation state surroundings (Pidsley et al., 2016). creating category, recover informative HVPs otherwise excluded analysis working canonical VMR definition array context. first step identify Variable Methylated Regions(VMRs) using RAMEN::findVMRs() function. function uses GenomicRanges::reduce() group regions, strand-sensitive. Illumina microarrays, MAPINFO probes usually provided + strand. using array, recommend first convert strand probes “+”. step, recommend users use M-values use appropiate statistical analyses (see Pan Du, et al., 2010, BMC Bioinformatics) can see, RAMEN::findVMRs() returns list four elements: var_score_threshold: MAD-score variance threshold used define Highly Variable Probes. highly_variable_probes: data frame probes passed variability score threshold imposed user, variability score (MAD score variance). canonical_VMRs: GRanges object strict candidate VMRs - regions composed two contiguous, correlated proximal Highly Variable Probes; thresholds depend ones specified user) non_canonical_VMRs: GRanges object highly variable probes without neighboring CpGs measured max_distance array. Category created take acccount Illumina array design single probes capturing methylation state regulatory regions. Furthermore, can see following warning message chunk : printed screen just warn us RAMEN::findVMRs() running sequentially. RAMEN supports parallel computing increased speed, really important working real data sets tend contain information whole genome. , set parallel backend R session running function (e.g., doFuture::registerDoFuture()) evaluation strategy (e.g., future::plan(multisession)). , function can run normally. working big datasets, parallel backend might throw error exceed maximum allowed size globals exported future expression. can fixed increasing allowed size (e.g. running options(future.globals.maxSize= +Inf)) Finally, convert output RAMEN::findVMRs() data frame, object can easily use produce plots explore results, object needed following parts pipeline. VMRs data frame, can explore data set using ggplot, following example: Width non canonical VMRs (base pairs). Next, want summarize DNAme level VMR per individual. , use RAMEN::summarizeVMRs(). non canonical VMRs, nothing summarize, DNAme level corresponding probe returned. canonical VMRs, median DNAme level region returned per individual representative value. result data frame VMR IDs columns individual IDs rows.","code":"#We need to modify the RAMEN::test_array_manifest object by assigning to  #row names to the probe ID column; it was saved this way because storing  #the TargetID as row names reduced significantly the size of the data set.  test_array_manifest_final = RAMEN::test_array_manifest %>%    tibble::rownames_to_column(var = \"TargetID\")  VMRs = RAMEN::findVMRs(array_manifest = test_array_manifest_final,                         methylation_data = RAMEN::test_methylation_data,                         cor_threshold = 0,                         var_method = \"variance\",                         var_threshold_percentile = 0.9,                         max_distance = 1000) #> Identifying Highly Variable Probes... #> Identifying non canonical Variable Methylated Regions... #> Identifying canonical Variable Methylated Regions... #> Applying correlation filter to canonical Variable Methylated Regions... #> Warning: executing %dopar% sequentially: no parallel backend registered  #Take a look at the resulting object  dplyr::glimpse(VMRs) #> List of 4 #>  $ var_score_threshold   : Named num 13.5 #>   ..- attr(*, \"names\")= chr \"90%\" #>  $ highly_variable_probes:'data.frame':  300 obs. of  2 variables: #>   ..$ TargetID : chr [1:300] \"cg06187584\" \"cg09872009\" \"cg05437132\" \"cg26689799\" ... #>   ..$ var_score: num [1:300] 17.1 14.8 15.2 13.7 17.1 ... #>  $ canonical_VMRs        :Formal class 'GRanges' [package \"GenomicRanges\"] with 7 slots #>   .. ..@ seqnames       :Formal class 'Rle' [package \"S4Vectors\"] with 4 slots #>   .. ..@ ranges         :Formal class 'IRanges' [package \"IRanges\"] with 6 slots #>   .. ..@ strand         :Formal class 'Rle' [package \"S4Vectors\"] with 4 slots #>   .. ..@ seqinfo        :Formal class 'Seqinfo' [package \"GenomeInfoDb\"] with 4 slots #>   .. ..@ elementMetadata:Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots #>   .. ..@ elementType    : chr \"ANY\" #>   .. ..@ metadata       : list() #>  $ non_canonical_VMRs    :Formal class 'GRanges' [package \"GenomicRanges\"] with 7 slots #>   .. ..@ seqnames       :Formal class 'Rle' [package \"S4Vectors\"] with 4 slots #>   .. ..@ ranges         :Formal class 'IRanges' [package \"IRanges\"] with 6 slots #>   .. ..@ strand         :Formal class 'Rle' [package \"S4Vectors\"] with 4 slots #>   .. ..@ seqinfo        :Formal class 'Seqinfo' [package \"GenomeInfoDb\"] with 4 slots #>   .. ..@ elementMetadata:Formal class 'DFrame' [package \"S4Vectors\"] with 6 slots #>   .. ..@ elementType    : chr \"ANY\" #>   .. ..@ metadata       : list() #> Warning: executing %dopar% sequentially: no parallel backend registered VMRs_df = as.data.frame(VMRs[[\"canonical_VMRs\"]]) %>%    rbind(as.data.frame(VMRs[[\"non_canonical_VMRs\"]])) %>%    dplyr::select( -c(width.1,strand))  head(VMRs_df) #>   seqnames    start      end width n_VMPs       probes median_correlation #> 1       21 10990119 10990903   785      2 cg098720....          0.6099180 #> 2       21 11109021 11109336   316      2 cg007508....          0.6261681 #> 3       21 15456605 15456789   185      2 cg195094....          0.8595934 #> 4       21 15588038 15588830   793      2 cg023649....          0.6829510 #> 5       21 15955548 15956048   501      3 cg147721....          0.7548517 #> 6       21 16436438 16437768  1331      3 cg116304....          0.7124538 VMRs_df %>%    dplyr::filter(width > 1) %>% #Only plot canonical VMRs    ggplot2::ggplot(aes(x = width))+   ggplot2::geom_histogram(binwidth = 50, fill = \"#BAB4D8\")+   ggplot2::theme_classic()+   ggplot2::ggtitle(\"Canonical VMRs width (bp)\") summarized_methyl_VMR = RAMEN::summarizeVMRs(VMRs_df = VMRs_df,                                              methylation_data = test_methylation_data)  # Look at the resulting object summarized_methyl_VMR[1:5,1:5] #>            1        2        3        4           5 #> ID1 4.935942 2.853168 3.219038 5.384813 3.320883317 #> ID2 1.879166 2.699689 3.952487 2.927166 1.934283315 #> ID3 3.311818 1.078262 1.153573 4.690962 9.238518404 #> ID4 6.558106 4.683173 1.688233 3.448903 0.007576317 #> ID5 2.899969 4.930614 2.243714 5.788151 2.843904388"},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"identify-cis-snps","dir":"Articles","previous_headings":"Gene-environment interaction analysis","what":"Identify cis SNPs","title":"RAMEN","text":"identifying VMRs, recommend use SNPs cis VMR, since genetic variants associate DNAme changes tend abundant surroundings corresponding DNAme site (McClay et al., 2015). Also, effect sizes mQTLs (genetic variants associated DNAme changes) stronger cis SNPs compared trans SNPs. , restricting analysis cis SNPs, greatly reduce number variables keeping important ones. clear consensus close SNP DNAme site considered cis - distance threshold tend go kb 1 megabase. recommend use 1 Mb window cast wide net catch potentially relevant SNPs. can see resulting VMRs_df object almost exactly , two new columns (surrounding_SNPs SNP) contain information many SNPs found cis IDs according genotype data . important highlight following characteristics VMRs_df object: VMR_index column character vector. column corresponds unique identifier VMR data set. important keep character careful converted numeric, can happen save VMRs_df object table, read , use second object rest pipeline. columns probes SNP contain lists. structure really important rest analysis columns containing lists keep appearing function outputs. want know recommended way save load objects, please check Frequently Asked Questions. can also explore resulting object plots following: Disribution SNPs cis VMRs.","code":"VMRs_df = RAMEN::findCisSNPs(VMRs_df = VMRs_df,                              genotype_information = RAMEN::test_genotype_information,                              distance = 1e+06) #> Important: please make sure that the positions of the VMR data frame and the ones in the genotype information are from the same genome build.  #Take a look at the result dplyr::glimpse(VMRs_df)  #> Rows: 131 #> Columns: 10 #> $ VMR_index          <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", … #> $ seqnames           <fct> 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,… #> $ start              <int> 10990119, 11109021, 15456605, 15588038, 15955548, 1… #> $ end                <int> 10990903, 11109336, 15456789, 15588830, 15956048, 1… #> $ width              <int> 785, 316, 185, 793, 501, 1331, 888, 977, 573, 61, 5… #> $ n_VMPs             <int> 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … #> $ probes             <list> <\"cg09872009\", \"cg05437132\">, <\"cg00750806\", \"cg12… #> $ median_correlation <dbl> 0.6099180, 0.6261681, 0.8595934, 0.6829510, 0.75485… #> $ surrounding_SNPs   <int> 1, 1, 610, 667, 726, 794, 757, 529, 709, 788, 829, … #> $ SNP                <list> \"21:10873592:G:A\", \"21:10873592:G:A\", <\"21:1459574… VMRs_df %>%    dplyr::mutate(type = case_when(n_VMPs == 1 ~ \"non canonical\", #non canonical VMRs have only 1 probe by definition                           TRUE ~ \"canonical\"),          surrounding_SNPs = case_when( surrounding_SNPs > 3000 ~ 3000,                                        TRUE ~ surrounding_SNPs)) %>%    ggplot2::ggplot(aes(x = surrounding_SNPs)) +   ggplot2::geom_density() +   ggplot2::facet_grid(\"type\") +   ggplot2::theme_classic()"},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"conduct-variable-selection-on-genome-and-exposome-variables","dir":"Articles","previous_headings":"Gene-environment interaction analysis","what":"Conduct variable selection on genome and exposome variables","title":"RAMEN","text":"following stage pipeline screen available variables environmental cis SNPs data sets identify potentially relevant ones. achieved RAMEN::selectVariables() function. function uses data-driven approach based LASSO, embedded variable selection method commonly used machine learning. nutshell, LASSO penalizes models complex (.e., contain variables) favor simpler models (.e. contain less variables), expense reducing predictive power. Using LASSO’s variable screening property (.e., high probability, LASSO estimated model includes substantial covariates drops redundant ones) function intended select genotype environmental variables Variable Methylated Region (VMR) potential relevance presence user-specified concomitant variables (known DNAme confounders age, cell type proportion, etc.). information method, encourage users read documentation function, information LASSO direct readers Bühlmann Van de Geer, 2011. Overall, conducting variable selection strategy reduces overall computational time improves modeling performance : Reducing universe variables used fit models following stage (G/E/G+E/GxE model fitting comparison) Removing redundant variables, highly expected genetic environmental data sets high number variables Limiting interactions terms scenarios G E main effects selected potentially relevant, can think interaction variable selection using weak hierarchy Using LASSO, method good variable selection performance scalability Please make sure data NAs, since LASSO implementation use RAMEN support missing values. data missing values, consider handling . Since LASSO makes use Random Number Generation, setting seed highly encouraged result’s reproducibility using seed argument. note, setting seed inside function modifies seed globally (R’s default behavior). output RAMEN::selectVariables() object VMR index, G E variables selected VMR. can see using RAMEN::selectVariables() reduces number variables (originally 100 environmental variables 785 SNPs per VMR average seen Figure @ref(fig:cissnps)). Number G E selected variables. also expected real data VMRs SNP /environmental variables selected, since DNAme sites genome expected show association genetic variation environmental exposures data sets captured study. proportion VMRs scenarios depend data sets.","code":"selected_variables = RAMEN::selectVariables(   VMRs_df = VMRs_df,   genotype_matrix = RAMEN::test_genotype_matrix,   environmental_matrix= RAMEN::test_environmental_matrix,   covariates = RAMEN::test_covariates,   summarized_methyl_VMR = summarized_methyl_VMR,   seed = 1 ) #> Loading required package: foreach #> Loading required package: rngtools dplyr::glimpse(selected_variables) #> Rows: 131 #> Columns: 3 #> $ VMR_index      <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"… #> $ selected_genot <list> \"21:10873592:G:A\", \"21:10873592:G:A\", <\"21:15450190:C:… #> $ selected_env   <list> <\"E43\", \"E3\", \"E5\", \"E7\", \"E24\", \"E25\", \"E28\", \"E35\", … selected_variables %>%    dplyr::left_join(VMRs_df %>%                select(c(VMR_index,n_VMPs)),             by = \"VMR_index\") %>%    dplyr::transmute(VMR_index = VMR_index,             VMR_type = case_when(n_VMPs > 1 ~ \"canonical\",                           n_VMPs == 1 ~ \"non canonical\"),              genotype = lengths(selected_genot),             environment = lengths(selected_env)) %>%    tidyr::pivot_longer(-c(VMR_index, VMR_type)) %>%    dplyr::rename(group = name,          variables = value) %>%    ggplot2::ggplot(aes(x = VMR_type, y = variables)) +   ggplot2::geom_violin() +    ggplot2::geom_boxplot(width=0.1, outlier.shape=NA) +   ggplot2::facet_wrap(~group)+   ggplot2::ggtitle(\"Selected variables\")  +   ggplot2::theme_classic()"},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"authors-note-about-variables-interpretation","dir":"Articles","previous_headings":"Gene-environment interaction analysis > Conduct variable selection on genome and exposome variables","what":"Author’s note about variables interpretation","title":"RAMEN","text":"LASSO variable selection consistent multicollinearity data (.e., correlation variables), expected due high amount G E variables present studies kind. means run LASSO several times, two variables highly correlated, method select one drop one random. problem pipeline main conclusion per VMR whether DNAme better explained G /E components. example, VMR better explained SNP1 SNP2, highly correlated one , LASSO randomly pick SNP1 SNP2 (relevant provide redundant information); fit model SNP1 SNP2 following stage, winning model still G. words, main goal pipeline know whether VMR’s DNAme better explained G /E. user therefore warned cautious -interpret individual selected variables. Selected variables might used hypothesis generators associations, keeping mind selected variable might representing variables data set provide similar information.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"identify-the-best-explanatory-model-gegegxe-per-vmr","dir":"Articles","previous_headings":"Gene-environment interaction analysis","what":"Identify the best explanatory model (G/E/G+E/GxE) per VMR","title":"RAMEN","text":"Now selected list potentially relevant G E variables, fit models mentioned Table @ref(tab:modelstable) using RAMEN::lmGE() function. function fits, VMR, G E models variables selected, well possible pairwise combinations G+E GxE. fitting model, best model per group (group = G, E, G+E GxE) selected using Akaike Information Criterion (AIC) Bayesian Information Criterion (BIC). recommend using AIC BIC assumes true model set compared models. Since function fits models individual variables, assume DNAme variability likely influenced one single SNP/environmental exposure time, hypothesize cases, true model set compared models. Also, AIC excels situations models model space “incorrect”, AIC preferentially used cases true underlying function unknown selected model belong large class functions relationship pretty complex. worth mentioning however , metrics tend pick model large number scenarios. suggest users read Arijit Chakrabarti & Jayanta K. Ghosh, 2011 information difference metrics. selecting best model per group (G,E,G+E pr GxE), model lowest AIC BIC declared winning model. Additionally, RAMEN::lmGE() conducts variance decomposition analysis, relative R2 contribution variables interest (G, E GxE) reported. decomposition done using relaimpo R package, using Lindeman, Merenda Gold (lmg) method, based heuristic approach averaging relative R contribution variable input orders linear model. output RAMEN::lmGE() data frame following 13 columns: VMR_index: index respective VMR model_group: selected winning model (G, E, G+E GxE) variables: variable(s) present winning model (excluding covariates, included models) tot_r_squared: total R squared winning model g_r_squared: Estimated R2 allocated G component winning model, applicable e_r_squared: Estimated R2 allocated E winning model, applicable. gxe_r_squared: Estimated R2 allocated interaction winning model (GxE), applicable. AIC/BIC: AIC BIC metric best model VMR (depending option specified argument model_selection). second_winner: second group possesses next best model winning one (.e., G, E, G+E GxE). column may NA variables selected_variables correspond one group (G E), model groups compare . delta_aic/delta_bic: difference AIC BIC (depending option specified argument model_selection) winning model best model second_winner group (.e., G, E, G+E GxE). column may NA variables selected_variables correspond one group (G E), groups compare . delta_r_squared: R2 winning model - R2 second winner model. column may NA variables selected_variables correspond one group (G E), groups compare . basal_AIC/basal_BIC: AIC BIC basal model (.e., model fitted concomitant variables specified covariates argument) basal_rsquared: R2 basal model (.e., model fitted concomitant variables specified covariates argument)","code":"lmge_res = RAMEN::lmGE(   selected_variables = selected_variables,   summarized_methyl_VMR = summarized_methyl_VMR,   genotype_matrix = RAMEN::test_genotype_matrix,   environmental_matrix = RAMEN::test_environmental_matrix,   covariates = RAMEN::test_covariates,   model_selection = \"AIC\" )  # Check the output dplyr::glimpse(lmge_res) #> Rows: 128 #> Columns: 13 #> $ VMR_index       <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11… #> $ model_group     <chr> \"G+E\", \"G+E\", \"GxE\", \"GxE\", \"G+E\", \"GxE\", \"G+E\", \"GxE\"… #> $ variables       <list> <\"21:10873592:G:A\", \"E43\">, <\"21:10873592:G:A\", \"E43\"… #> $ tot_r_squared   <dbl> 0.5527507, 0.5115764, 0.6075657, 0.6794845, 0.7680461,… #> $ g_r_squared     <dbl> 0.1996156, 0.2095645, 0.3064024, 0.2738786, 0.3981840,… #> $ e_r_squared     <dbl> 0.34206198, 0.27143559, 0.15293109, 0.20266291, 0.2769… #> $ gxe_r_squared   <dbl> NA, NA, 0.1330680, 0.1126333, NA, 0.1432113, NA, 0.108… #> $ AIC             <dbl> 144.6841, 148.7250, 145.6987, 135.7819, 129.9252, 123.… #> $ second_winner   <chr> \"GxE\", \"GxE\", \"G+E\", \"G+E\", \"GxE\", \"G+E\", \"GxE\", \"G+E\"… #> $ delta_aic       <dbl> 1.04970268, 1.34557464, 1.01022314, 3.88212651, 0.0761… #> $ delta_r_squared <dbl> -0.013945293, -0.010539189, 0.041420496, 0.069427874, … #> $ basal_AIC       <dbl> 164.4893, 165.2905, 167.3019, 161.0771, 166.8374, 159.… #> $ basal_rsquared  <dbl> 0.011073059, 0.030576374, 0.015164242, 0.090309667, 0.…"},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"remove-poor-performing-winning-models","dir":"Articles","previous_headings":"Gene-environment interaction analysis > Identify the best explanatory model (G/E/G+E/GxE) per VMR","what":"Remove poor performing winning models","title":"RAMEN","text":"core pipeline RAMEN package identifies best explanatory model per VMR. However, despite models winners comparison models including G/E variable(s) dataset, winning models might perform better expect chance. Therefore, last step pipeline identifying winning models per VMR compute null distribution remove winning models likely winners chance. , use RAMEN::nullDistGE(). goal RAMEN::nullDistGE() create distribution increase R2 including SNP/E/SNP*E variables null hypothesis G E associations DNAme. null distribution obtained shuffling G E variables given dataset conducting variable selection G/E model selection. way, can simulate much additional variance explained models defined winners RAMEN methodology scenario G E associations DNAme randomized. distribution can used filter winning models non-shuffled dataset add explained variance basal model randomized data . clarification, please note vignette refer SNP*E, referring interaction term present interaction model (.e. interaction variable GxE model). assumption adjusting concomitant variables VMRs across genome follow behavior regarding increment explained variance randomized G E data, can pool delta R squared values VMRs create null distribution taking advantage high number VMRs dataset. assumption decreases significantly number permutations required create null distribution reduces computational time. information please read RAMEN paper (preparation). RAMEN::nullDistGE() simulates delta R squared distribution null hypothesis G E association DNA methylation (DNAme) variability permutation analysis. , function shuffles G E variables dataset, followed variable selection modelling steps selectVariables() lmGE().steps repeated several times indicated permutations parameter. words, using shuffled G E data, simulate increase R2 observed random data using RAMEN methodology. output data frame useful column purpose R2_difference, corresponds increase R squared obtained including G/E variable(s) winning model (.e., R squared difference winning model model concomitant variables specified covariates; tot_r_squared - basal_rsquared lmGE output) recommend use two different thresholds winning models depending whether marginal (G E) joint models (G+E GxE). reason different R2_difference distributions. E G models lower mean R2_difference single shuffled term model (SNP E). comparison, joint models higher mean R2_difference two three shuffled terms (SNP, E SNP*E), just chance increases probability higher R2_difference. R2 difference (winner - basal) suffled data set. suggest using 95th percentile distributions threshold remove bad performing winning models found observed data. can see final data set example dropped almost VMRs . something expected since working toy data coming random sampling. recommend users package include number VMRs find conclusive best model final results report (either variables selected RAMEN::selectVariables() pass R2_difference threshold obtained RAMEN::nullDistGE()). Variable Methylated Regions best explanatory models , can see toy example, got following results: VMRs better explained G model: 2 VMRs better explained E model: 1 VMRs better explained G+E model: 1 VMRs better explained GxE model: 3 VMRs conclusive explanatory model: 124","code":"# Compute the null distribution  null_dist = RAMEN::nullDistGE(   VMRs_df = VMRs_df,   genotype_matrix = RAMEN::test_genotype_matrix,   environmental_matrix = RAMEN::test_environmental_matrix,   summarized_methyl_VMR = summarized_methyl_VMR,   permutations = 5,   covariates = RAMEN::test_covariates,   seed = 1,   model_selection = \"AIC\" )  #Take a look at the object  head(null_dist) #>   VMR_index tot_r_squared model_group R2_difference AIC_difference permutation #> 1         1     0.2606017           E     0.2495286       157.7547           1 #> 2         2     0.2976822           E     0.2671059       157.5905           1 #> 3         3     0.6086939         G+E     0.5935297       143.5972           1 #> 4         4     0.3777878           E     0.2874781       151.5921           1 #> 5         6     0.6133220         G+E     0.5269145       137.8163           1 #> 6         7     0.3451632           E     0.2497069       155.1677           1 # See the distribution of R2_difference across different winning models null_dist %>%    ggplot2::ggplot(aes(x = R2_difference)) +   ggplot2::geom_histogram() +    ggplot2::facet_grid(\"model_group\") +   ggplot2::theme_classic() #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # Get a cutoff of the 95th percentile of the null distribution for single and joint models cutoff_single = quantile(null_dist %>%                             filter(model_group %in% c(\"G\",\"E\")) %>%                             pull(R2_difference),                           0.95) cutoff_joint = quantile(null_dist %>%                             filter(model_group %in% c(\"G+E\",\"GxE\")) %>%                             pull(R2_difference),                           0.95)  #Filter out bad performing winning models. filtered_res = lmge_res %>%    dplyr::mutate(r2_difference_basal = tot_r_squared - basal_rsquared,          pass_cutoff_threshold = case_when(model_group %in% c(\"G\", \"E\") ~ r2_difference_basal > cutoff_single,                                            model_group %in% c(\"G+E\", \"GxE\") ~ r2_difference_basal > cutoff_joint)) %>%    dplyr::filter(pass_cutoff_threshold) %>% #Filter based on the cutoff threshold   dplyr::select(-pass_cutoff_threshold) #Drop temporary column  #Check the final results dplyr::glimpse(filtered_res) #> Rows: 7 #> Columns: 14 #> $ VMR_index           <chr> \"5\", \"6\", \"28\", \"39\", \"96\", \"98\", \"106\" #> $ model_group         <chr> \"G+E\", \"GxE\", \"E\", \"GxE\", \"G\", \"G\", \"GxE\" #> $ variables           <list> <\"21:15671097:T:A\", \"E43\">, <\"21:15671097:T:A\", \"E… #> $ tot_r_squared       <dbl> 0.7680461, 0.7769276, 0.5555035, 0.7097936, 0.6431… #> $ g_r_squared         <dbl> 0.39818402, 0.38220942, NA, 0.09101486, 0.6398122… #> $ e_r_squared         <dbl> 0.2769884, 0.1650993, 0.5244324, 0.2406247, NA, NA… #> $ gxe_r_squared       <dbl> NA, 0.1432113, NA, 0.3522698, NA, NA, 0.1515714 #> $ AIC                 <dbl> 129.9252, 123.3999, 145.1528, 147.3162, 140.8549, … #> $ second_winner       <chr> \"GxE\", \"G+E\", NA, \"G+E\", \"G+E\", NA, \"G+E\" #> $ delta_aic           <dbl> 0.07612103, 3.90964213, NA, 3.27939276, 0.34990027… #> $ delta_r_squared     <dbl> -0.01440811, 0.04856945, NA, 0.05583976, -0.019097… #> $ basal_AIC           <dbl> 166.8374, 159.6965, 166.5303, 177.6443, 169.6680, … #> $ basal_rsquared      <dbl> 0.092873702, 0.086407501, 0.031071178, 0.025884145… #> $ r2_difference_basal <dbl> 0.6751724, 0.6905201, 0.5244324, 0.6839094, 0.6398… # Include the VMRs with no winning model in the final results object final_res = VMRs_df %>%    dplyr::left_join(filtered_res,                     by = \"VMR_index\")  # Plot final results final_res %>%    dplyr::group_by(model_group) %>%    dplyr::summarise(count = n()) %>%    ggplot2::ggplot(aes(x = model_group, y = count)) +   ggplot2::geom_col() +   ggplot2::xlab(\"Best explanatory model\") +   ggplot2::ylab(\"VMRs\") +   ggplot2::theme_classic()"},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"authors-note-about-model-interpretation","dir":"Articles","previous_headings":"Gene-environment interaction analysis > Identify the best explanatory model (G/E/G+E/GxE) per VMR","what":"Author’s note about model interpretation","title":"RAMEN","text":"model simplicity, winning model single E /G variable (interaction term applicable). means scenario given VMR influence 2 Es Gs, one better explains VMR’s DNAme alone selected. words, VMR reality influenced e.g. folate intake smoking, information environmental exposures, best model (E) folate intake (case variable better explains DNAme variability region alone). , interpreting VMR potentially influence smoking might correct. recommend user check total R2 winning model explore remaining variance explained winning model. also stress interpretation individual variables done caution used exploration research hypothesis generation. Please see Author’s note variables interpretation) advice -interpretation selected variables; logic applies variables present winning models.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"variations-to-the-standard-workflow","dir":"Articles","previous_headings":"","what":"Variations to the standard workflow","title":"RAMEN","text":"Besides using RAMEN completing analysis mentioned , outputs package’s function can help users DNAme analyses, : Reduction tests prior EWAS differential methylation analysis RAMEN::findVMRs()(.e., conducting analysis identified VMRs 1) reduces redundant tests grouping nearby correlated CpGs, 2) avoids tests non-variant regions). can help reduce multiple hypothesis testing burden. Summarize DNAme region interest RAMEN::summarizeVMRs() Easily conduct variable selection high-dimensional data sets identify potentially relevant variables one two independent data sets RAMEN::selectVariables(). Fit additive interaction models given two sets variables interest (limited G E) select best explanatory model DNAme data RAMEN::selectVariables() RAMEN::lmGE() (e.g. exploring interaction two environmental dimensions contribution DNAme variability). Quickly identify SNPs cis CpG probes RAMEN::findCisSNPs() (e.g. cis mQTL analyses) Get median correlation probes regions interest (RAMEN::medCorVMR()).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"frequently-asked-questions","dir":"Articles","previous_headings":"","what":"Frequently Asked Questions","title":"RAMEN","text":"can save RAMEN data frames columns lists observations? Saving data frames produced RAMEN might seem difficult lists observations several columns, supported read/write functions. suggest two options: Use fwrite() fread() data.table package (recommended time storage space). Save files .rds","code":"# Example for saving and reading selected_variables object data.table::fwrite(selected_variables, file = \"path/selected_variables.csv\")  # Read the csv file and make lists the elements in the required columns selected_variables = fread(\"path/selected_variables.csv\", data.table = FALSE) %>%      mutate(selected_genot = str_split(selected_genot, pattern = \"\\\\|\"), # fwrite saves lists as strings separated by |          selected_env =str_split(selected_env, pattern = \"\\\\|\"),          VMR_index = as.character(VMR_index)) # Example for saving the selected_variables object saveRDS(selected_variables, file = \"path/selected_variables.Rds\")  #Load the object readRDS(file = \"path/selected_variables.Rds\")"},{"path":"https://ericknavarrod.github.io/RAMEN/articles/RAMEN.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"RAMEN","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] doRNG_1.8.6      rngtools_1.5.2   foreach_1.5.2    tidyr_1.3.1      #> [5] ggplot2_3.5.1    dplyr_1.1.4      RAMEN_1.0.0      knitr_1.48       #> [9] BiocStyle_2.32.1 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.5            shape_1.4.6.1           xfun_0.48               #>  [4] bslib_0.8.0             lattice_0.22-6          vctrs_0.6.5             #>  [7] tools_4.4.1             generics_0.1.3          stats4_4.4.1            #> [10] parallel_4.4.1          tibble_3.2.1            fansi_1.0.6             #> [13] highr_0.11              pkgconfig_2.0.3         Matrix_1.7-0            #> [16] desc_1.4.3              S4Vectors_0.42.1        lifecycle_1.0.4         #> [19] GenomeInfoDbData_1.2.12 compiler_4.4.1          farver_2.1.2            #> [22] stringr_1.5.1           textshaping_0.4.0       munsell_0.5.1           #> [25] mitools_2.4             codetools_0.2-20        survey_4.4-2            #> [28] GenomeInfoDb_1.40.1     htmltools_0.5.8.1       sass_0.4.9              #> [31] yaml_2.3.10             glmnet_4.1-8            pillar_1.9.0            #> [34] pkgdown_2.1.1           jquerylib_0.1.4         MASS_7.3-60.2           #> [37] cachem_1.1.0            iterators_1.0.14        boot_1.3-30             #> [40] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.4           #> [43] purrr_1.0.2             bookdown_0.40           labeling_0.4.3          #> [46] splines_4.4.1           fastmap_1.2.0           grid_4.4.1              #> [49] colorspace_2.1-1        cli_3.6.3               magrittr_2.0.3          #> [52] survival_3.6-4          utf8_1.2.4              corpcor_1.6.10          #> [55] withr_3.0.1             scales_1.3.0            UCSC.utils_1.0.0        #> [58] rmarkdown_2.28          XVector_0.44.0          httr_1.4.7              #> [61] ragg_1.3.3              evaluate_1.0.0          GenomicRanges_1.56.1    #> [64] IRanges_2.38.1          rlang_1.1.4             Rcpp_1.0.13             #> [67] DBI_1.2.3               glue_1.8.0              BiocManager_1.30.25     #> [70] BiocGenerics_0.50.0     jsonlite_1.8.9          R6_2.5.1                #> [73] relaimpo_2.2-7          systemfonts_1.1.0       fs_1.6.4                #> [76] zlibbioc_1.50.0"},{"path":"https://ericknavarrod.github.io/RAMEN/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Erick . Navarro-Delgado. Author, maintainer.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Navarro-Delgado E (2024). RAMEN: RAMEN: Regional Association Methylome variability Exposome geNome. R package version 1.0.0, https://ericknavarrod.github.io/RAMEN/.","code":"@Manual{,   title = {RAMEN: RAMEN: Regional Association of Methylome variability with the Exposome and geNome},   author = {Erick I. Navarro-Delgado},   year = {2024},   note = {R package version 1.0.0},   url = {https://ericknavarrod.github.io/RAMEN/}, }"},{"path":[]},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"Regional Association Methylome variability Exposome geNome (RAMEN) R package whose goal identify Variable Methylated Regions (VMRs) microarray DNA methylation data. Additionally, using Genotype (G) Environmental (E) data, can identify G, E, G+E GxE model better explains variability.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"can install development version RAMEN GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ErickNavarroD/RAMEN\")"},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"core-functions","dir":"","previous_headings":"","what":"Core functions","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"RAMEN consists six main functions: findVMRs() identifies Variable Methylated Regions (VMRs) microarrays summarizeVMRs()summarizes regional methylation state VMR findCisSNPs() identifies SNPs cis VMR selectVariables() conducts LASSO-based variable selection strategy identify potentially relevant cis SNPs environmental variables lmGE() fits linear single-variable genetic (G) environmental (E), pairwise additive (G+E) interaction (GxE) linear models select best explanatory model per VMR. nullDistGE() simulates delta R squared null distribution G E effects DNAme variability. Useful filtering poor-performing best explanatory models selected lmGE(). Altogether, functions create pipeline takes set individuals genotype, environmental exposure DNA methylation information, generates estimation contribution genotype environment DNA methylation variability. Functions conduct computationally intensive tasks compatible parallel computing.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"detailed tutorial use RAMEN, please check package’s vignette website.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"variations-to-the-standard-workflow","dir":"","previous_headings":"","what":"Variations to the standard workflow","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"Besides using RAMEN completing analysis mentioned , package provides individual functions help users tasks, : Reduction tests prior EWAS differential methylation analysis (.e., conducting analyses identified VMRs reduce redundant tests grouping nearby correlated CpGs avoid tests non-variant regions) Fit additive interaction models given set variables interest select best explanatory model DNAme data. Quickly identify SNPs cis CpG probes variable reduction mQTL analyses. Get median correlation probes regions interest (medCorVMR()).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"how-to-get-help-for-ramen","dir":"","previous_headings":"","what":"How to get help for RAMEN","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"question RAMEN usage, please post issue github repository future users also benefit discussion alternative option, can contact Erick Navarro-Delgado erick.navarrodelgado@bcchr.ca.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"want thank Dr. Keegan Korthauer Dr. Michael S. Kobor supervision, feedback support throughout development package. Also, want thank members Kobor Korthauer lab comments discussion. RAMEN package logo created Carlos Cortés-Quiñones Dorothy Lin. Carlos created drawing, Dorothy refined logo lettering.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"work supported University British Columbia, BC Children’s Hospital Research Institute Social Exposome Cluster.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"citing-ramen","dir":"","previous_headings":"","what":"Citing RAMEN","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"manuscript detailing RAMEN use currently preparation. information please contact Erick . Navarro-Delgado erick.navarrodelgado@bcchr.ca.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/index.html","id":"licence","dir":"","previous_headings":"","what":"Licence","title":"RAMEN: Regional Association of Methylome variability with the Exposome and geNome","text":"GPL (>= 3)","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findCisSNPs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find cis SNPs around a set of Variable Methylated Regions (VMRs) — findCisSNPs","title":"Find cis SNPs around a set of Variable Methylated Regions (VMRs) — findCisSNPs","text":"Identification genotyped Single Nucleotide Polymorphisms (SNPs) close VMR using distance threshold.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findCisSNPs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find cis SNPs around a set of Variable Methylated Regions (VMRs) — findCisSNPs","text":"","code":"findCisSNPs(VMRs_df, genotype_information, distance = 1e+06)"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findCisSNPs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find cis SNPs around a set of Variable Methylated Regions (VMRs) — findCisSNPs","text":"VMRs_df GRanges object converted data frame. Must contain following columns: \"seqnames\", \"start\", \"end\". columns present automatically object conversion correspond chromosome number, range region. genotype_information data frame information genotyped sites interest. must contain following columns: \"CHROM\" - chromosome number, \"POS\" - Genomic basepair position SNP corresponding chromosome (must contain values class int), \"ID\" - SNP ID. nomenclature CHROM must match one used VMRs_df seqnames column (.e., VMRs_df$seqnames uses 1, 2, 3, X, Y Chr1, Chr2, Chr3, ChrX, ChrY, etc. chromosome number, genotype_information$CHROM values must encoded way). distance distance threshold used identify cis SNPs. Default 1 Mb.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findCisSNPs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find cis SNPs around a set of Variable Methylated Regions (VMRs) — findCisSNPs","text":"VMR_df object (data frame compatible GRanges conversion) following new columns: cis SNPs identified VMR, number SNPs surrounding VMR specified window VMR_index, created already existing based rownames VMR_df.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findCisSNPs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find cis SNPs around a set of Variable Methylated Regions (VMRs) — findCisSNPs","text":"Important: please make sure positions VMR data frame ones genotype information genome build.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findVMRs.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Variable Methylated Regions in microarrays — findVMRs","title":"Identify Variable Methylated Regions in microarrays — findVMRs","text":"Identifies autosomal Highly Variable Probes (HVP) merges Variable Methylated Regions (VMRs) given Illumina manifest.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findVMRs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Variable Methylated Regions in microarrays — findVMRs","text":"","code":"findVMRs(   array_manifest,   methylation_data,   cor_threshold = 0.15,   var_method = \"variance\",   var_threshold_percentile = 0.9,   max_distance = 1000 )"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findVMRs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Variable Methylated Regions in microarrays — findVMRs","text":"array_manifest Information probes array. Requires columns MAPINFO (basepair position probe genome), CHR (chromosome), TargetID (probe name) STRAND (important set , since VMRs created based CpGs strand; positions reported based single DNA strand, contain either vector \"+\", \"-\" \"*\" probes). methylation_data data frame containing M B values, samples columns probes rows. Data expected already passed quality control cleaning steps. cor_threshold Numeric value (0-1) used median pearson correlation threshold identifying VMRs (.e. VMRs median pairwise probe correlation parameter). var_method Method use measure variability data set. options \"mad\" (median absolute deviation) \"variance\". var_threshold_percentile percentile (0-1) used cutoff define Highly Variable Probes (therefore VMRs). default 0.9 percentile traditionally used previous studies. max_distance Maximum distance allowed two probes grouped region. default 1000 window traditionally used previous studies.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findVMRs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Variable Methylated Regions in microarrays — findVMRs","text":"list following elements: $var_score_threshold: threshold used define Highly Variable Probes (mad variance, depending specified choice). $highly_variable_probes: data frame probes passed variability score threshold imposed user, variability score (MAD score variance). $canonical_VMRs: GRanges object strict candidate VMRs - regions composed two contiguous, correlated proximal Highly Variable Probes; thresholds depend ones specified user) $non_canonical_VMRs: GRanges object highly variable probes without neighboring CpGs measured max_distance array. Category created take acccount Illumina array design single probes capturing methylation state regulatory regions.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findVMRs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Variable Methylated Regions in microarrays — findVMRs","text":"function identifies HVPs using MAD scores variance metrics, groups VMRs, defined clusters proximal correlated HVPs (distance correlation defined user). Output VMRs can separated canonical non canonical. Canonical VMRs regions meet correlation closeness criteria. guidance correlation threshold use, recommend checking Supplementary Figure 1 CoMeBack R package (Gatev et al., 2020) simulation empirically determine default guidance specification correlation threshold parameter dependent sample size done. default, use threshold 0.15 per CoMeBack authors minimum threshold suggestion. hand, non canonical VMRs regions composed HVPs nearby probes measured array (according max_distance parameter); category created account Illumina EPIC array design, high number probes regulatory regions represented single probe. Furthermore, probes shown good representatives methylation state surroundings (Pidsley et al., 2016). creating category, recover informative HVPs otherwise excluded analysis array design. function uses GenomicRanges::reduce() group regions, strand-sensitive. Illumina microarrays, MAPINFO probes usually provided + strand. using array, recommend first convert strand probes \"+\". function supports parallel computing increased speed. , set parallel backend R session running function (e.g., doFuture::registerDoFuture()) evaluation strategy (e.g., future::plan(multisession)). , function can run usual. working big datasets, parallel backend might throw error exceed maximum allowed size globals exported future expression. can fixed increasing allowed size (e.g. running options(future.globals.maxSize= +Inf) ) Note: function excludes sex chromosomes.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/findVMRs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Variable Methylated Regions in microarrays — findVMRs","text":"","code":"#We need to modify the RAMEN::test_array_manifest object by assigning to #row names to the probe ID column; it was saved this way because storing #the TargetID as row names reduced significantly the size of the data set. test_array_manifest_final = RAMEN::test_array_manifest %>% tibble::rownames_to_column(var = \"TargetID\")  VMRs = RAMEN::findVMRs(array_manifest = test_array_manifest_final,                        methylation_data = RAMEN::test_methylation_data,                        cor_threshold = 0,                        var_method = \"variance\",                        var_threshold_percentile = 0.9,                        max_distance = 1000) #> Identifying Highly Variable Probes... #> Identifying non canonical Variable Methylated Regions... #> Identifying canonical Variable Methylated Regions... #> Applying correlation filter to canonical Variable Methylated Regions... #> Warning: executing %dopar% sequentially: no parallel backend registered"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/lmGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear G, E, G+E and GxE models and select the winning model — lmGE","title":"Fit linear G, E, G+E and GxE models and select the winning model — lmGE","text":"set Variable Methylated Region (VMR), function fits set genotype (G), environment (E), pairwise additive (G + E) pairwise interaction (G x E) models, one variable time, selects best fitting one. Additional information winning model provided, R2, R2 increase comparing basal model (.e., model fitted concomitant variables), delta AIC/BIC next best model different category, explained variance decomposed G, E GxE components (applicable).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/lmGE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear G, E, G+E and GxE models and select the winning model — lmGE","text":"","code":"lmGE(   selected_variables,   summarized_methyl_VMR,   genotype_matrix,   environmental_matrix,   covariates = NULL,   model_selection = \"AIC\" )"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/lmGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear G, E, G+E and GxE models and select the winning model — lmGE","text":"selected_variables data frame obtained RAMEN::selectVariables(). data frame must contain three columns: 'VMR_index' characters unique ID VMR; ´selected_genot' 'selected_env' SNPs environmental variables, respectively, used fitting genotype (G), environment (E), additive (G + E) interaction (G x E) models. columns 'selected_env' 'selected_genot' must contain lists elements; VMRs environmental genotype selected variables must contain empty list NULL, NA , character(0) \"\" inside. summarized_methyl_VMR data frame containing individual's VMR summarized region methylation. suggested use output RAMEN::summarizeVMRs().Rows must reflects individuals, columns VMRs names columns must correspond index said VMR, must match index VMRs_df$VMR_index. names rows must correspond sample IDs, must match IDs matrices. genotype_matrix matrix number-encoded genotypes. Columns must correspond samples, rows SNPs. suggest using gene-dosage model, encode SNPs ordinally depending genotype allele charge, 2 (AA), 1 (AB) 0 (BB). column names must correspond individual IDs. environmental_matrix matrix environmental variables. numeric values supported. case factor variables, recommended encode numbers re-code dummy variables two levels. Columns must correspond environmental variables rows individuals. Row names must individual IDs. covariates matrix containing covariates (.e., concomitant variables / variables ones interested ) adjusted final GxE models (e.g., cell type proportions, age, etc.). column correspond covariate row individual. Row names must correspond individual IDs. model_selection metric use select best model VMR. Supported options \"AIC\" BIC\". information one use can found Details section.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/lmGE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear G, E, G+E and GxE models and select the winning model — lmGE","text":"data frame following columns: VMR_index: unique ID VMR model_group: group winning model belongs (.e., G, E, G+E GxE) variables: variable(s) present winning model (excluding covariates, included models) tot_r_squared: R squared winning model g_r_squared: Estimated R2 allocated G winning model, applicable. e_r_squared: Estimated R2 allocated E winning model, applicable. gxe_r_squared: Estimated R2 allocated interaction winning model (GxE), applicable. AIC/BIC: AIC BIC metric best model VMR (depending option specified argument model_selection). second_winner: second group possesses next best model winning one (.e., G, E, G+E GxE). column may NA variables selected_variables correspond one group (G E), model groups compare . delta_aic/delta_bic: difference AIC BIC value (depending option specified argument model_selection) winning model best model second_winner group (.e., G, E, G+E GxE). column may NA variables selected_variables correspond one group (G E), groups compare . delta_r_squared: R2 winning model - R2 second winner model. column may NA variables selected_variables correspond one group (G E), groups compare . basal_AIC/basal_BIC: AIC BIC basal model (.e., model fitted concomitant variables specified covariates argument) basal_rsquared: R2 basal model (.e., model fitted concomitant variables specified covariates argument)","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/lmGE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit linear G, E, G+E and GxE models and select the winning model — lmGE","text":"function supports parallel computing increased speed. , set parallel backend R session running function (e.g., doFuture::registerDoFuture()) evaluation strategy (e.g., future::plan(multisession)). , function can run usual. recommended also set options(future.globals.maxSize= +Inf). VMR, function computes set models using variables indicated selected_variables object. indicated G E variables, lmGE() fits four groups models: G: Genetics model - fitted one SNP time. E: Environmental model - fitted one environmental variable time. G+E: Additive model - fitted pairwise combination G E variables indicated selected_variables. GxE: Interaction model - fitted pairwise combination G E variables indicated selected_variables. models fit VMR G E variables selected_variables object. VMR neither G E variables, VMR ignored returned output object. Model selection Following model fitting stage, best model per group selected using Akaike Information Criterion (AIC) Bayesian Information Criterion (BIC). metrics statistical approaches select best model data set, strengths limitations make excel different situations. recommend using AIC BIC assumes true model set compared models. Since function fits models individual variables, assume DNAme variability likely influenced one single SNP/environmental exposure time, hypothesize cases, true model set compared models. Also, AIC excels situations models model space \"incorrect\", AIC preferentially used cases true underlying function unknown selected model belong large class functions relationship pretty complex. worth mentioning however , metrics tend pick model large number scenarios. suggest users read Arijit Chakrabarti & Jayanta K. Ghosh, 2011 information difference metrics. selecting best model per group (G,E,G+E pr GxE), model lowest AIC BIC declared winning model. delta AIC/BIC difference R2 computed relative model second lowest AIC/BIC (.e., best model different group winning one), reported final object. Analysis variance variance decomposition Finally, variance decomposed relative R2 contribution variables interest (G, E GxE) reported. decomposition done using relaimpo R package, using Lindeman, Merenda Gold (lmg) method, based heuristic approach averaging relative R contribution variable input orders linear model. estimation partitioned R2 factor models conducted keeping covariates always model first entry (.e., variables specified covariates change order). information, suggest users read documentation publication relaimpo R package (Grömping, 2006).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/map_revmap_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Map revmap column to probe names after reducing a GenomicRanges object — map_revmap_names","title":"Map revmap column to probe names after reducing a GenomicRanges object — map_revmap_names","text":"Given revmap row (e.g. 1 5 6), map positions corresponding probe names (end something like \"cg00000029\",  \"cg00000158\", \"cg00000165\".helper function findVMRs()).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/map_revmap_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map revmap column to probe names after reducing a GenomicRanges object — map_revmap_names","text":"","code":"map_revmap_names(positions, manifest_hvp)"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/map_revmap_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map revmap column to probe names after reducing a GenomicRanges object — map_revmap_names","text":"positions revmap row form vector manifest_hvp manifest highly variable probes used findVMRs() function probes row names","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/map_revmap_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map revmap column to probe names after reducing a GenomicRanges object — map_revmap_names","text":"vector names probes conform one reduced region","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/medCorVMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the median probe methylation pearson correlation for each Variable Methylated Region (VMR). — medCorVMR","title":"Compute the median probe methylation pearson correlation for each Variable Methylated Region (VMR). — medCorVMR","text":"function take GRanges object converted data frame, row corresponds Variable Methylated Region. , computes pairwise correlation probes VMR reports median pairwise probe correlation.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/medCorVMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the median probe methylation pearson correlation for each Variable Methylated Region (VMR). — medCorVMR","text":"","code":"medCorVMR(VMR_df, methylation_data)"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/medCorVMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the median probe methylation pearson correlation for each Variable Methylated Region (VMR). — medCorVMR","text":"VMR_df GRanges object converted data frame. Must contain following columns: \"seqnames\", \"start\", \"end\"  (produced automatically object conversion) \"probes\" (containing list element contains vector probes constituting VMR). methylation_data data frame containing M B values, samples columns probes rows. Data expected already passed quality control cleaning steps.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/medCorVMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the median probe methylation pearson correlation for each Variable Methylated Region (VMR). — medCorVMR","text":"data frame like VMR_df extra column per region containing median pairwise correlation.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/medCorVMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the median probe methylation pearson correlation for each Variable Methylated Region (VMR). — medCorVMR","text":"function supports parallel computing increased speed. , set parallel backend R session running function (e.g., doFuture::registerDoFuture()) evaluation strategy (e.g., future::plan(multisession)). , function can run usual. recommended also set options(future.globals.maxSize= +Inf).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/nullDistGE.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a delta R squared null distribution of G and E effects on DNAme variability — nullDistGE","title":"Simulate a delta R squared null distribution of G and E effects on DNAme variability — nullDistGE","text":"function simulates delta R squared distribution null hypothesis G E association DNA methylation (DNAme) variability permutation analysis. , function shuffles G E variables dataset, followed variable selection modelling steps selectVariables() lmGE().steps repeated several times indicated permutations parameter. using shuffled G E data, simulate increase R2 observed random data using RAMEN methodology.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/nullDistGE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a delta R squared null distribution of G and E effects on DNAme variability — nullDistGE","text":"","code":"nullDistGE(   VMRs_df,   genotype_matrix,   environmental_matrix,   summarized_methyl_VMR,   permutations = 10,   covariates = NULL,   seed = NULL,   model_selection = \"AIC\" )"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/nullDistGE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a delta R squared null distribution of G and E effects on DNAme variability — nullDistGE","text":"VMRs_df data frame converted GRanges object. Recommended use output RAMEN::findCisSNPs(). Must one VMR per row, contain following columns: \"VMR_index\" (unique ID VMR VMRs_df CHARACTERS) \"SNP\" (column list observation, containing name SNPs surrounding corresponding VMR).  SNPs contained \"SNP\" column must present object indicated genotype_matrix argument, must contain VMRs contained summarized_methyl_VMR. VMRs surrounding SNPs must empty list SNP column (either list(NULL), list(NA), list(\"\") list(character(0)) ). genotype_matrix matrix number-encoded genotypes. Columns must correspond samples, rows SNPs. suggest using gene-dosage model, encode SNPs ordinally depending genotype allele charge, 2 (AA), 1 (AB) 0 (BB). column names must correspond individual IDs. environmental_matrix matrix environmental variables. numeric values supported. case factor variables, recommended encode numbers re-code dummy variables two levels. Columns must correspond environmental variables rows individuals. Row names must individual IDs. summarized_methyl_VMR data frame containing individual's VMR summarized region methylation. suggested use output RAMEN::summarizeVMRs().Rows must reflects individuals, columns VMRs names columns must correspond index said VMR, must match index VMRs_df$VMR_index. names rows must correspond sample IDs, must match IDs matrices. permutations description covariates matrix containing covariates (.e., concomitant variables / variables ones interested ) adjusted final GxE models (e.g., cell type proportions, age, etc.). column correspond covariate row individual. Row names must correspond individual IDs. seed integer number initializes pseudo-random number generator. Random numbers function created lambda cross validation LASSO stages. Setting seed highly encouraged result reproducibility. Please note setting seed function modifies seed globally. model_selection metric use select best model VMR. Supported options \"AIC\" BIC\". information one use can found Details section.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/nullDistGE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a delta R squared null distribution of G and E effects on DNAme variability — nullDistGE","text":"data frame following columns: VMR_index: unique ID VMR. model_group: group winning model belongs (.e., G, E, G+E GxE) tot_r_squared: R squared winning model R2_difference: increase R squared obtained including G/E variable(s) winning model (.e., R squared difference winning model model concomitant variables specified covariates; tot_r_squared - basal_rsquared lmGE output) AIC_difference/BIC_difference: AIC/BIC difference winning model model concomitant variables specified covariates; BIC/AIC - basal_BIC/basal_BIC lmGE output)","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/nullDistGE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a delta R squared null distribution of G and E effects on DNAme variability — nullDistGE","text":"core pipeline RAMEN package identifies best explanatory model per VMR. However, despite models winners comparison models including G/E variable(s) dataset, winning models might perform better expect chance. Therefore, goal function create distribution increase R2 null hypothesis G E associations DNAme. null distribution obtained shuffling G E variables given dataset conducting variable selection G/E model selection. way, can simulate much additional variance explained models defined winners RAMEN methodology scenario G E associations DNAme randomized. distribution can used filter winning models non-shuffled dataset add explained variance basal model randomized data . assumption adjusting concomitant variables VMRs across genome follow behavior regarding increment explained variance randomized G E data, can pool delta R squared values VMRs create null distribution taking advantage high number VMRs dataset. assumption decreases significantly number permutations required create null distribution reduces computational time. information please read RAMEN paper (preparation).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/selectVariables.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection of environment and genotype variables for Variable Methylated Regions (VMRs) — selectVariables","title":"Selection of environment and genotype variables for Variable Methylated Regions (VMRs) — selectVariables","text":"VMR, function selects genotype environmental variables using LASSO.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/selectVariables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection of environment and genotype variables for Variable Methylated Regions (VMRs) — selectVariables","text":"","code":"selectVariables(   VMRs_df,   genotype_matrix,   environmental_matrix,   covariates = NULL,   summarized_methyl_VMR,   seed = NULL )"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/selectVariables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selection of environment and genotype variables for Variable Methylated Regions (VMRs) — selectVariables","text":"VMRs_df data frame converted GRanges object. Recommended use output RAMEN::findCisSNPs(). Must one VMR per row, contain following columns: \"VMR_index\" (unique ID VMR VMRs_df CHARACTERS) \"SNP\" (column list observation, containing name SNPs surrounding corresponding VMR).  SNPs contained \"SNP\" column must present object indicated genotype_matrix argument, must contain VMRs contained summarized_methyl_VMR. VMRs surrounding SNPs must empty list SNP column (either list(NULL), list(NA), list(\"\") list(character(0)) ). genotype_matrix matrix number-encoded genotypes. Columns must correspond samples, rows SNPs. suggest using gene-dosage model, encode SNPs ordinally depending genotype allele charge, 2 (AA), 1 (AB) 0 (BB). column names must correspond individual IDs. environmental_matrix matrix environmental variables. numeric values supported. case factor variables, recommended encode numbers re-code dummy variables two levels. Columns must correspond environmental variables rows individuals. Row names must individual IDs. covariates matrix containing covariates (.e., concomitant variables / variables ones interested ) adjusted final GxE models (e.g., cell type proportions, age, etc.). column correspond covariate row individual. Row names must correspond individual IDs. summarized_methyl_VMR data frame containing individual's VMR summarized region methylation. suggested use output RAMEN::summarizeVMRs().Rows must reflects individuals, columns VMRs names columns must correspond index said VMR, must match index VMRs_df$VMR_index. names rows must correspond sample IDs, must match IDs matrices. seed integer number initializes pseudo-random number generator. Random numbers function created lambda cross validation LASSO stages. Setting seed highly encouraged result reproducibility. Please note setting seed function modifies seed globally.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/selectVariables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selection of environment and genotype variables for Variable Methylated Regions (VMRs) — selectVariables","text":"data frame three columns: VMR_index: Unique VMR ID. selected_genot: List-containing column selected SNPs. selected_env: List-containing column selected environmental variables.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/selectVariables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Selection of environment and genotype variables for Variable Methylated Regions (VMRs) — selectVariables","text":"function supports parallel computing increased speed. , set parallel back-end R session running function (e.g., doFuture::registerDoFuture()) evaluation strategy (e.g., future::plan(multisession)). , function can run usual. recommended also set options(future.globals.maxSize= +Inf). Please make sure data NAs, since LASSO implementation use RAMEN support missing values. selectVariables() uses LASSO, embedded variable selection method penalizes models complex (.e., contain variables) favor simpler models (.e. contain less variables), expense reducing predictive power. Using LASSO's variable screening property (high probability, LASSO estimated model includes substantial covariates drops redundant ones) function selects genotype environment variables potential relevance Variable Methylated Region (VMR) dataset (see also Bühlmann van de Geer, 2011). VMR, LASSO run three times: 1) including genotype variables selection step, 2) including environmental variables selection step, 3) Including genotype environmental variables selection step. done ensure function captures variables relevant within category (e.g., SNPs strongly associated DNAme levels VMR presence rest SNPs) presence variables category (e.g. SNPs strongly associated DNAme levels VMR presence rest SNPs environmental variables). Every time LASSO run, basal covariates (.e., concomitant variables )indicated argument covariates penalized (.e., variables always included models coefficients subjected shrinkage). way, promising E G variables presence concomitant variables selected. LASSO model uses tuned lambda minimizes 5-fold cross-validation error within corresponding data. function uses lambda.min value contrast lambda.1se goal within RAMEN package use LASSO reduce number variables going used next fitting pairwise interaction models lmGE(). Since step variables selected based main effects, preferable cast \"wider net\" select slightly higher number variables potentially strong interaction effect paired another variable. Furthermore, since case LASSO used screening procedure select variables fit separately independent models compared, overfitting issue using lambda.min impose big concern. finding best lambda value, sequence models fit coordinate descent using glmnet(). Random numbers function created lambda cross validation LASSO stages. Setting seed highly encouraged result reproducibility using seed argument. Please note setting seed inside function modifies seed globally (R's default behavior). Note: want conduct variable selection step one data set (.e., genotype), can set argument environmental_matrix = NULL.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/summarizeVMRs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the methylation states of Variable Methylated Regions (VMRs) — summarizeVMRs","title":"Summarize the methylation states of Variable Methylated Regions (VMRs) — summarizeVMRs","text":"VMR dataset, returns object median methylation region per individual representative score.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/summarizeVMRs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the methylation states of Variable Methylated Regions (VMRs) — summarizeVMRs","text":"","code":"summarizeVMRs(VMRs_df, methylation_data)"},{"path":"https://ericknavarrod.github.io/RAMEN/reference/summarizeVMRs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the methylation states of Variable Methylated Regions (VMRs) — summarizeVMRs","text":"VMRs_df GRanges object converted data frame. Must contain following columns: \"seqnames\", \"start\", \"end\"  (produced automatically object conversion) \"probes\" (containing list element contains vector probes constituting VMR). methylation_data data frame containing M B values, samples columns probes rows.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/summarizeVMRs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the methylation states of Variable Methylated Regions (VMRs) — summarizeVMRs","text":"data frame samples rows, VMRs columns. value inside cell corresponds summarized methylation value said VMR corresponding individual. column names correspond VMR_index, created already existing based rownames VMR_df.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/summarizeVMRs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize the methylation states of Variable Methylated Regions (VMRs) — summarizeVMRs","text":"function supports parallel computing increased speed. , set parallel backend R session running function (e.g., doFuture::registerDoFuture()) evaluation strategy (e.g., future::plan(multisession)). , function can run usual.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_array_manifest.html","id":null,"dir":"Reference","previous_headings":"","what":"Array manifest example data set — test_array_manifest","title":"Array manifest example data set — test_array_manifest","text":"subset data Illumina's EPIC array manifest (first 3,000 probes chromosome 21).","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_array_manifest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Array manifest example data set — test_array_manifest","text":"","code":"test_array_manifest"},{"path":[]},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_array_manifest.html","id":"test-array-manifest","dir":"Reference","previous_headings":"","what":"test_array_manifest","title":"Array manifest example data set — test_array_manifest","text":"data frame 3,000 rows 3 columns: rownames Probe ID - storage reasons, variable stored row names, rownames converted new column called \"TargetID\" prior use RAMEN. MAPINFO Probe genomic position (h19) CHR Chromosome STRAND Strand","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_array_manifest.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Array manifest example data set — test_array_manifest","text":"https://webdata.illumina.com/downloads/productfiles/methylationEPIC/infinium-methylationepic-v-1-0-b4-manifest-file-csv.zip","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Concomitant variable example data set — test_covariates","title":"Concomitant variable example data set — test_covariates","text":"Concomitant variable drawn normal distribution","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concomitant variable example data set — test_covariates","text":"","code":"test_covariates"},{"path":[]},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_covariates.html","id":"test-covariates","dir":"Reference","previous_headings":"","what":"test_covariates","title":"Concomitant variable example data set — test_covariates","text":"data frame 30 rows 1 column: rownames Individual IDs covar1 Concomitant variable drawn normal distribution mean=0 sd=1","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_environmental_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Environmental exposures example data set — test_environmental_matrix","title":"Environmental exposures example data set — test_environmental_matrix","text":"One hundred environmental exposure variables drawn normal distribution mean=0 sd=1 30 individuals.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_environmental_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environmental exposures example data set — test_environmental_matrix","text":"","code":"test_environmental_matrix"},{"path":[]},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_environmental_matrix.html","id":"test-environmental-matrix","dir":"Reference","previous_headings":"","what":"test_environmental_matrix","title":"Environmental exposures example data set — test_environmental_matrix","text":"data frame 30 rows 100 columns: rownames Individual ID E1:100 100 example environmental exposures; column names correspond exposure IDs","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_genotype_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Genotype metadata example data set — test_genotype_information","title":"Genotype metadata example data set — test_genotype_information","text":"Genotype chromosome 21 position metadata obtained private genotyping data set.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_genotype_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genotype metadata example data set — test_genotype_information","text":"","code":"test_genotype_information"},{"path":[]},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_genotype_information.html","id":"test-genotype-information","dir":"Reference","previous_headings":"","what":"test_genotype_information","title":"Genotype metadata example data set — test_genotype_information","text":"data frame 8539 rows 3 columns: CHROM Chromosome POS Probe genomic position (h19) ID SNP ID","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_genotype_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Genotype matrix example — test_genotype_matrix","title":"Genotype matrix example — test_genotype_matrix","text":"Genotype matrix example using gene-dosage model, encodes SNPs ordinally depending genotype allele charge, 2 (AA), 1 (AB) 0 (BB). Valus drawn binomial distribution size 2 probability 0.5.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_genotype_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genotype matrix example — test_genotype_matrix","text":"","code":"test_genotype_matrix"},{"path":[]},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_genotype_matrix.html","id":"test-genotype-matrix","dir":"Reference","previous_headings":"","what":"test_genotype_matrix","title":"Genotype matrix example — test_genotype_matrix","text":"data frame 8,539 rows 30 columns: rownames SNP ID ID1:30 Individual's 1 30 genotypes; column names correspond individual IDs","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_methylation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Methylation data matrix example — test_methylation_data","title":"Methylation data matrix example — test_methylation_data","text":"Simulated M values 3000 probes selected test_array_manifest 30 individuals. Values converted beta values, drawn bimodal Beta distribution.","code":""},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_methylation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methylation data matrix example — test_methylation_data","text":"","code":"test_methylation_data"},{"path":[]},{"path":"https://ericknavarrod.github.io/RAMEN/reference/test_methylation_data.html","id":"test-methylation-data","dir":"Reference","previous_headings":"","what":"test_methylation_data","title":"Methylation data matrix example — test_methylation_data","text":"data frame 3,000 rows 30 columns: rownames Probe IDs (column TargetID EPIC array) ID1:30 DNAme profile individuals 1 30; column names correspond individual IDs","code":""}]
